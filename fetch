#!/usr/bin/env python
#
# Copyright (c) 2009, Patrick Shields.
#
# big-streaming is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
# USA
#
import sys, time
import argloop
from nws.client import NetWorkSpace

validOptions = {'t':False, 'n':'localhost', 'p':'8765', 'w':'__default', 'v':'default', 'r':False,
                'a':False, 'l':False, 'd':'1'}

helpMessage = """
Usage: fetch [options] [variable]
Fetch a NetWorkSpace variable value.  stdin variables accepted.

Options:
-t  Try. Do not block if no values are availible.
-n  Hostname to connect to the server on. Defaults to 'localhost'.
-p  Port to connect to ther server on. Defaults to '8765'.
-w  Workspace name to use. Defaults to '__default'.
-r  read from stdin. Will ignore any variable passed.
-a  Fetch all values.
-l  Do not add a newline when writing the result to stdout.
-d  When reading all values, wait this long (in seconds) before 
    giving up. Defaults to 1.
    
Variable name defaults to 'default'.

example:
fetch -t -nmysystem -p2222 -wfood eggs
or
cat breakfast_foods.txt | fetch -t -r -nmysystem -p2222 -wfood
"""

def fetch(workspace, variable, tri=False, all=False, nnl=False,
          delay=1):
    end = ''
    if not nnl:
        end = '\n'
    if all:
        ret = workspace.fetch(variable)
        while ret != None:
            while ret != None:
                sys.stdout.write(ret+end)
                ret = workspace.fetchTry(variable)
            time.sleep(int(delay))
            ret = workspace.fetchTry(variable)
    elif tri:
        ret = workspace.fetchTry(variable)
        if ret == None:
            ret = ''
        sys.stdout.write(ret+end)
    else:
        sys.stdout.write(workspace.fetch(variable)+end)

if __name__ == '__main__':
    options = argloop.processArgs(sys.argv[1:])
    
    if len(options) > 0 and options[0] == '-h':
        print helpMessage
        sys.exit(0)

    for opt in options:
        if validOptions.keys().count(opt[1]) < 1:
            sys.stderr.write('Invalid option: '+opt[:2]+'\n')
            sys.exit(1)
        if len(opt) == 2:
            validOptions[opt[1]] = True
        else:
            validOptions[opt[1]] = opt[2:]
    
    workspace = NetWorkSpace(wsName = validOptions['w'], serverHost = validOptions['n'],
                             serverPort = int(validOptions['p']))

    if validOptions['r']:
        for value in sys.stdin:
            fetch(workspace, value.strip(), validOptions['t'], validOptions['a'],
                  validOptions['l'], validOptions['d'])
    else:
        if len(sys.argv) > len(options) + 1:
            fetch(workspace, sys.argv[len(sys.argv)-1], validOptions['t'], validOptions['a'],
                  validOptions['l'], validOptions['d'])
        else:
            fetch(workspace, validOptions['v'], validOptions['t'], validOptions['a'],
                  validOptions['l'], validOptions['d'])
