#!/usr/bin/env python
#
# Copyright (c) 2009, Patrick Shields.
#
# big-streaming is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
# USA
#
import sys
import argloop
from nws.client import NetWorkSpace, NwsDeclarationFailedException

validOptions = {'n':'localhost', 'p':'8765', 'w':'__default', 'v':'default', 't':'fifo'}
validTypes = ['lifo','fifo','single']

helpMessage = """
Usage: store [options] value
Store a NetWorkSpace variable value.  stdin values accepted.

Options:
-n  Hostname to connect to the server on. Defaults to 'localhost'.
-p  Port to connect to ther server on. Defaults to '8765'.
-w  Workspace name to use. Defaults to '__default'.
-v  Variable name to use. Defaults to 'default'.
-t  Type of variable to use.  Can be lifo, fifo, or single, which
    holds only one value and will overwrite it after a second store.
    Declarations are final, so a second declaration will create a
    new variable with the same name, and all data under that variable
    will be lost.  Defaults to fifo.

example:
store -nmysystem -p2222 -wfood -vbreakfast -tsingle eggs
or
cat breakfast_foods.txt | store -nmysystem -p2222 -wfood -vbreakfast
"""

def store(workspace, variable, value):
    workspace.store(variable, value)

if __name__ == '__main__':
    options = argloop.processArgs(sys.argv[1:])
    
    if len(options) > 0 and options[0] == '-h':
        print helpMessage
        sys.exit(0)

    for opt in options:
        if validOptions.keys().count(opt[1]) < 1:
            sys.stderr.write('Invalid option: '+opt[:2]+'\n')
            sys.exit(1)
        if len(opt) == 2:
            validOptions[opt[1]] = True
        else:
            validOptions[opt[1]] = opt[2:]
    
    workspace = NetWorkSpace(wsName = validOptions['w'], serverHost = validOptions['n'],
                             serverPort = int(validOptions['p']), persistent = True)

    if validTypes.count(validOptions['t']) < 1:
        print """Variable type: '"""+validOptions['t']+"""' not available. Exiting..."""
        sys.exit(1)
    try:
        workspace.declare(validOptions['v'], validOptions['t'])
    except NwsDeclarationFailedException:
        w="WARNING: A contradictory declaration was passed. Deleting varable "+validOptions['v']
        w+=" and recreating it as type "+validOptions['t']+"."
        print w
        workspace.deleteVar(validOptions['v'])
        workspace.declare(validOptions['v'], validOptions['t'])


    if len(options) + 1 == len(sys.argv):
        for value in sys.stdin:
            store(workspace, validOptions['v'], value)
    else:
        store(workspace, validOptions['v'], sys.argv[len(sys.argv)-1])
